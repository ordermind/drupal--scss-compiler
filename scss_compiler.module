<?php

/**
 * @file
 * Module compiles scss files into css via scssphp compiler.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function scss_compiler_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.scss_compiler':
      $readme = __DIR__ . '/README.md';
      $text = file_get_contents($readme);
      $output = '';

      // If the Markdown module is installed, use it to render the README.
      if ($text && \Drupal::moduleHandler()->moduleExists('markdown') === TRUE) {
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        $output = $filter->process($text, 'en');
      }
      // Else the Markdown module is not installed output the README as text.
      elseif ($text) {
        $output = '<pre>' . $text . '</pre>';
      }

      // Add a link to the Drupal.org project.
      $output .= '<p>';
      $output .= t('Visit the <a href="@project_link">SCSS Compiler project page</a> on Drupal.org for more information.', [
        '@project_link' => 'https://www.drupal.org/project/scss_compiler',
      ]);
      $output .= '</p>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scss_compiler_form_system_performance_settings_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['scss_compiler'] = [
    '#type' => 'details',
    '#title' => t('SCSS Compiler'),
    '#open' => TRUE,
    '#weight' => 0,
  ];

  $form['scss_compiler']['scss_cache'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable SCSS cache'),
    '#default_value' => \Drupal::service('scss_compiler')->isCacheEnabled(),
  ];

  $form['scss_compiler']['advanced'] = [
    '#type' => 'details',
    '#title' => t('Advanced'),
  ];

  $form['scss_compiler']['advanced']['scss_sourcemaps'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable SCSS sourcemaps'),
    '#default_value' => \Drupal::service('scss_compiler')->getOption('sourcemaps'),
  ];

  $form['scss_compiler']['advanced']['scss_output_format'] = [
    '#type' => 'select',
    '#title' => t('Output format'),
    '#description' => t('Default output format is compressed'),
    '#options' => [
      'expanded'    => 'Expanded',
      'nested'      => 'Nested',
      'compact'     => 'Compact',
      'compressed'  => 'Compressed',
      'crunched'    => 'Crunched',
    ],
    '#default_value' => \Drupal::service('scss_compiler')->getOption('output_format'),
  ];

  $form['scss_compiler']['advanced']['actions'] = [
    '#type' => 'actions',
    '#id'   => 'scss_compiler_actions',
    'recompile' => [
      '#type'   => 'submit',
      '#value'  => t('Recompile'),
      '#submit' => ['scss_compiler_recompile'],
    ],
  ];

  $form['#submit'][] = 'scss_compiler_system_performance_settings_submit';

}

/**
 * Recompiles all scss files.
 */
function scss_compiler_recompile() {
  \Drupal::service('scss_compiler')->compileAll(TRUE);
  \Drupal::service('messenger')->addStatus(t('SCSS files recompiled.'));
}

/**
 * Saves scss compiler settings on form submit.
 */
function scss_compiler_system_performance_settings_submit(&$form, FormStateInterface $form_state) {
  \Drupal::service('config.factory')->getEditable('scss_compiler.settings')
    ->set('cache', $form_state->getValue('scss_cache'))
    ->set('sourcemaps', $form_state->getValue('scss_sourcemaps'))
    ->set('output_format', $form_state->getValue('scss_output_format'))
    ->save();
}

/**
 * Implements hook_library_info_alter().
 */
function scss_compiler_library_info_alter(&$libraries, $extension) {
  // Find all scss files, and add it extension to file info
  // to use it in hook_css_alter.
  foreach ($libraries as &$library) {
    if (!empty($library['css'])) {
      foreach ($library['css'] as &$group) {
        foreach ($group as $key => &$file) {
          if (pathinfo($key, PATHINFO_EXTENSION) === 'scss') {
            $file['namespace'] = $extension;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function scss_compiler_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'css_alter') {
    $implementation = $implementations['scss_compiler'];
    unset($implementations['scss_compiler']);
    $implementations['scss_compiler'] = $implementation;
  }
}

/**
 * Implements hook_css_alter().
 */
function scss_compiler_css_alter(&$css, AttachedAssetsInterface $assets) {
  // Find all scss files and create associative array with info
  // Each scss file has name, source_path, css_path,
  // namespace - theme/module name, uses to build path to static resources.
  $scss_files = [];
  foreach ($css as $path => $file) {
    if (pathinfo($path, PATHINFO_EXTENSION) === 'scss') {
      $scss_file = Drupal::service('scss_compiler')->buildCompileFileInfo($file);
      if (empty($scss_file)) {
        continue;
      }

      $scss_files[$scss_file['namespace']][$scss_file['source_path']] = $scss_file;
      if (!file_exists($scss_file['css_path'])) {
        Drupal::service('scss_compiler')->compile($scss_file);
      }
      unset($css[$path]);
      $css[$scss_file['css_path']] = $file;
      $css[$scss_file['css_path']]['data'] = $scss_file['css_path'];
    }
  }
  // All scss files saves to compile list cache.
  Drupal::service('scss_compiler')->setCompileList($scss_files);
}

/**
 * Implements hook_page_attachments_alter().
 */
function scss_compiler_page_attachments_alter(array &$attachments) {
  // @todo compile only files which presents on active page.
  if (!\Drupal::service('scss_compiler')->isCacheEnabled()) {
    Drupal::service('scss_compiler')->compileAll();
  }
}

/**
 * Implements hook_cache_flush().
 */
function scss_compiler_cache_flush() {
  if (Drupal::hasService('scss_compiler')) {
    if (!\Drupal::service('scss_compiler')->isCacheEnabled()) {
      file_unmanaged_delete_recursive(Drupal::service('scss_compiler')->getCacheFolder());
    }
  }
}
